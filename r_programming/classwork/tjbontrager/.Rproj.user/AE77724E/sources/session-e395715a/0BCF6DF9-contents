---
title: 'DATA151: Tidyr and Joins'
author: "Tyler Bontrager"
output: 
  html_document:
    toc: true
    collapsed: false
    toc_float: true
    toc_depth: 5
---

### Learning Objectives

In this lesson students will gain more practice with the `tidyverse` with a particular focus on wrangling the `tidyr` package.  

This lesson covers:

* `tidyr` Package 
  * `gather()`
  * `spread()`
  * `unite()`
  * `separate()` 
  
* Joins: `left_join`, `inner_join`, `right_join`

Before you start you will need to load the `tidyverse`

```{r message=FALSE, warning=FALSE}
library(tidyverse)
```


### PART I: `tidyr`

### Does your data spark joy?

#### Toy Example

##### Step 1: Generate Data
```{r}
# generate stock market data
set.seed(1)
stocks <- data.frame(
  time = as.Date('2009-01-01') + 0:9,
  X = rnorm(10, 20, 1),
  Y = rnorm(10, 20, 2),
  Z = rnorm(10, 20, 4)
)
stocks 
```

##### Step 2: Gather

```{r}
# gather 
stocksG<-stocks%>%
  gather(key=stock, value=price, -time )
# All this info is across too many columns;
# make a column called 'stock' and use the heading of each column
# as labels for each of those groups. Big and wide into 
# neat and narrow. "Apply to each column save for 'time'."

head(stocksG)
```

##### Step 3: Visualize

```{r}
ggplot(stocksG, aes(time, price, color=stock))+
  geom_line()
```

##### Step 4: Spread

```{r}
stocksS<-stocksG%>%
  spread(key=stock, value=price)

head(stocksS)
```

#### Real World Example: Hawaii Tourism

##### Step 1: Import Data

```{r}
## IMPORT THE DATA
hi <- read.csv("/cloud/project/Hawaii_Tourism.csv", header=TRUE)
## INSERT CODE HERE ##
```

##### Step 2: Look at the structure

```{r}
## LOOK AT THE STRUCTURE
## INSERT CODE HERE ##
str(hi)
```

##### Step 3: Rename the columns

```{r}
## RENAME THE COLUMNS
## INSERT CODE HERE ##
colnames(hi)[4:26]<-1999:2021
```

##### Step 4: Tidy Data with `gather()`

```{r}
## TIDY YOUR DATA
## INSERT CODE HERE ##
hiG<-hi%>%
  filter(Units=="days")%>%
  select(-Units)%>%
  gather(key=year,value=days,-c(Group,Indicator))

## LOOK AT THE NEW STRUCTURE
str(hiG)
## INSERT CODE HERE ##
```
```{r}
head(hiG)
```

##### Step 5: Visualize Trends

```{r}
## YEAR NEEDS TO BE NUMERIC TO PLOT
## INSERT CODE HERE ##
hiG$year<-as.numeric(hiG$year)

## SCATTERPLOT WITH TREND
## INSERT CODE HERE ##
ggplot(hiG,aes(x=year,y=days))+
  geom_point()+
  geom_smooth()


## TRY GEOM_JITTER 
## INSERT CODE HERE ##
ggplot(hiG,aes(x=year,y=days))+
  geom_jitter()+
  geom_smooth()
```

##### Step 6: Studying Subgroups

Which island is the most popular to visit?

Use `dplyr` to explore subgroups. 

```{r}
## WHAT ISLAND IS MOST POPULAR?
## INSERT CODE HERE ##

## INSERT CODE HERE ##
## WHATS WRONG WITH THIS??
```

Oh no!  What happened?! 

We forgot about NAs!

```{r}
## INSERT CODE HERE ##

## INSERT CODE HERE ##

```

Try another example! 

What are the trends in reasons for travels to Hawaii?

```{r}
## ARE THERE TRENDS BY TYPE?
## INSERT CODE HERE ##

## INSERT CODE HERE ##
```

### PART II: Joins

There are three types of joins that we will look at:

* Inner Join: Looks for only elements that exist in both dataframes

* Left Join (or Right Join): Matches elements from the left dataframe to the right



#### Toy Example

##### Step 1: Load Data

Tibbles are like data frames that can be more easily manipulated in the tidyverse. In this example we create a tibble for comic book characters.

```{r}
# a tibble is a type of a data frame

superheroes <- tibble::tribble(
  ~name, ~alignment,  ~gender,          ~publisher,
  "Magneto",      "bad",   "male",            "Marvel",
  "Storm",     "good", "female",            "Marvel",
  "Mystique",      "bad", "female",            "Marvel",
  "Batman",     "good",   "male",                "DC",
  "Joker",      "bad",   "male",                "DC",
  "Catwoman",      "bad", "female",                "DC",
  "Hellboy",     "good",   "male", "Dark Horse Comics"
)

publishers <- tibble::tribble(
  ~publisher, ~yr_founded,
  "DC",       1934L,
  "Marvel",       1939L,
  "Image",       1992L
)
```

##### Step 2: Inner Join

```{r}
# inner join super hero and publisher
insp<-inner_join(superheroes, publishers)

insp
```

##### Step 3: Left Join

```{r}
# left join super hero and publisher 
ljsp<-left_join(superheroes, publishers)

ljsp
```


#### Real World Example: NBA

##### Step 1: Load Data

```{r}
## SALARY DATA for 2019-2020 season
## INSERT CODE HERE ##


## METRICS ON PLAYER PERFORMANCE
## 1996 to 2022
## INSERT CODE HERE ##

salaries1920 <- read.csv("https://raw.githubusercontent.com/kitadasmalley/DATA151/main/Data/nba2019-20.csv", 
                         header=TRUE)
all_seasons <- read.csv("https://raw.githubusercontent.com/kitadasmalley/DATA151/main/Data/all_seasons.csv", 
                        header=TRUE)

```

##### Step 2: Learn about your data

```{r}
# SALARIES
## INSERT CODE HERE ##
str(salaries1920)
head(salaries1920)

```
```{r}
# METRICS
## INSERT CODE HERE ##
str(all_seasons)
head(all_seasons)
```

##### Step 3: Wrangle your data

We need to make an apples to apples comparison.  

* Filter the season data by 2019-2020 season.  
* We also need to have the same name for the variable we wish to match.

```{r}
## INSERT CODE HERE ##
season1920 = all_seasons %>%
  filter(season=="2019-20")%>%
  select(-season)%>%
  mutate(player=player_name)
season1920
```

##### Step 4: Join the data

```{r}
## INSERT CODE HERE ##
joinNBA = salaries1920 %>%
  left_join(season1920)
joinNBA
```

##### Step 5: Visualize

```{r}
## INSERT CODE HERE ##
ggplot(joinNBA,aes(x=pts,y=salary)) +
  geom_point()+
  geom_smooth()
```



### PART III: BONUS Tidy Material

#### Combine columns with `unite`

##### Step 1: Create Data
```{r}
# lets create more fake data for dates and times
set.seed(1)
date <- as.Date('2016-01-01') + 0:14
hour <- sample(1:24, 15)
min <- sample(1:60, 15)
second <- sample(1:60, 15)
event <- sample(letters, 15)
data <- data.frame(date, hour, min, second, event)
data
```

##### Step 2: Unite

```{r}
dataUnite <- data %>%
  unite(datehour, date, hour, sep = ' ') %>%
  unite(datetime, datehour, min, second, sep = ':')

str(dataUnite)
```

##### Step 3: Separate

```{r}
# seperate 
dataSep <- dataUnite %>% 
  separate(datetime, c('date', 'time'), sep = ' ') %>% 
  separate(time, c('hour', 'min', 'second'), sep = ':')

dataSep
```
